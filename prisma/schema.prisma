// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  donations     Donation[]
  subscriptions Subscription[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Donation {
  id           String           @id @default(cuid())
  userId       String?
  amountCents  Int
  currency     String           @default("USD")
  frequency    DonationFrequency
  method       PaymentMethod
  status       DonationStatus   @default(PENDING)
  isAnonymous  Boolean          @default(false)
  donorName    String?
  donorEmail   String?
  message      String?
  externalId   String           // Stripe PaymentIntent ID or PayPal Order ID
  receiptUrl   String?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([method])
  @@index([createdAt])
}

model Subscription {
  id              String             @id @default(cuid())
  userId          String?
  method          PaymentMethod
  status          SubscriptionStatus @default(ACTIVE)
  externalId      String             // Stripe Customer/Subscription ID or PayPal Subscription ID
  planAmountCents Int
  currency        String             @default("USD")
  startedAt       DateTime           @default(now())
  canceledAt      DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  user User? @relation(fields: [userId], references: [id])

  @@index([status])
  @@index([method])
}

model WebhookEvent {
  id          String    @id @default(cuid())
  provider    Provider
  eventType   String
  payload     String    // JSON string
  processedAt DateTime?
  createdAt   DateTime  @default(now())

  @@index([provider, eventType])
  @@index([processedAt])
}

enum Role {
  USER
  ADMIN
}

enum DonationFrequency {
  ONE_TIME
  MONTHLY
}

enum PaymentMethod {
  STRIPE
  PAYPAL
}

enum DonationStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAUSED
}

enum Provider {
  STRIPE
  PAYPAL
}